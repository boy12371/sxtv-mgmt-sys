// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sx.tv.entites;

import com.sx.tv.entites.Channel;
import com.sx.tv.entites.PlayInfo;
import com.sx.tv.entites.TVShow;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect PlayInfo_Roo_Finder {
    
    public static TypedQuery<PlayInfo> PlayInfo.findPlayInfoesByPlayChannel(Channel playChannel) {
        if (playChannel == null) throw new IllegalArgumentException("The playChannel argument is required");
        EntityManager em = PlayInfo.entityManager();
        TypedQuery<PlayInfo> q = em.createQuery("SELECT o FROM PlayInfo AS o WHERE o.playChannel = :playChannel", PlayInfo.class);
        q.setParameter("playChannel", playChannel);
        return q;
    }
    
    public static TypedQuery<PlayInfo> PlayInfo.findPlayInfoesByPlayDateBetween(Date minPlayDate, Date maxPlayDate) {
        if (minPlayDate == null) throw new IllegalArgumentException("The minPlayDate argument is required");
        if (maxPlayDate == null) throw new IllegalArgumentException("The maxPlayDate argument is required");
        EntityManager em = PlayInfo.entityManager();
        TypedQuery<PlayInfo> q = em.createQuery("SELECT o FROM PlayInfo AS o WHERE o.playDate BETWEEN :minPlayDate AND :maxPlayDate", PlayInfo.class);
        q.setParameter("minPlayDate", minPlayDate);
        q.setParameter("maxPlayDate", maxPlayDate);
        return q;
    }
    
    public static TypedQuery<PlayInfo> PlayInfo.findPlayInfoesByPlayDateGreaterThan(Date playDate) {
        if (playDate == null) throw new IllegalArgumentException("The playDate argument is required");
        EntityManager em = PlayInfo.entityManager();
        TypedQuery<PlayInfo> q = em.createQuery("SELECT o FROM PlayInfo AS o WHERE o.playDate > :playDate", PlayInfo.class);
        q.setParameter("playDate", playDate);
        return q;
    }
    
    public static TypedQuery<PlayInfo> PlayInfo.findPlayInfoesByReservedToGreaterThanEquals(Date reservedTo) {
        if (reservedTo == null) throw new IllegalArgumentException("The reservedTo argument is required");
        EntityManager em = PlayInfo.entityManager();
        TypedQuery<PlayInfo> q = em.createQuery("SELECT o FROM PlayInfo AS o WHERE o.reservedTo >= :reservedTo", PlayInfo.class);
        q.setParameter("reservedTo", reservedTo);
        return q;
    }
    
    public static TypedQuery<PlayInfo> PlayInfo.findPlayInfoesByTvshow(TVShow tvshow) {
        if (tvshow == null) throw new IllegalArgumentException("The tvshow argument is required");
        EntityManager em = PlayInfo.entityManager();
        TypedQuery<PlayInfo> q = em.createQuery("SELECT o FROM PlayInfo AS o WHERE o.tvshow = :tvshow", PlayInfo.class);
        q.setParameter("tvshow", tvshow);
        return q;
    }
    
}
