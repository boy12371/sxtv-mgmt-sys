// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sx.tv.entites;

import com.sx.tv.entites.Company;
import com.sx.tv.entites.People;
import com.sx.tv.entites.Progress;
import com.sx.tv.entites.Status;
import com.sx.tv.entites.TVShow;
import com.sx.tv.entites.Theme;
import com.sx.tv.entites.User;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect TVShow_Roo_Finder {
    
    public static TypedQuery<TVShow> TVShow.findTVShowsByCompany(Company company) {
        if (company == null) throw new IllegalArgumentException("The company argument is required");
        EntityManager em = TVShow.entityManager();
        TypedQuery<TVShow> q = em.createQuery("SELECT o FROM TVShow AS o WHERE o.company = :company", TVShow.class);
        q.setParameter("company", company);
        return q;
    }
    
    public static TypedQuery<TVShow> TVShow.findTVShowsByCount(int count) {
        EntityManager em = TVShow.entityManager();
        TypedQuery<TVShow> q = em.createQuery("SELECT o FROM TVShow AS o WHERE o.count = :count", TVShow.class);
        q.setParameter("count", count);
        return q;
    }
    
    public static TypedQuery<TVShow> TVShow.findTVShowsByInputDateBetween(Date minInputDate, Date maxInputDate) {
        if (minInputDate == null) throw new IllegalArgumentException("The minInputDate argument is required");
        if (maxInputDate == null) throw new IllegalArgumentException("The maxInputDate argument is required");
        EntityManager em = TVShow.entityManager();
        TypedQuery<TVShow> q = em.createQuery("SELECT o FROM TVShow AS o WHERE o.inputDate BETWEEN :minInputDate AND :maxInputDate", TVShow.class);
        q.setParameter("minInputDate", minInputDate);
        q.setParameter("maxInputDate", maxInputDate);
        return q;
    }
    
    public static TypedQuery<TVShow> TVShow.findTVShowsByInputDateEquals(Date inputDate) {
        if (inputDate == null) throw new IllegalArgumentException("The inputDate argument is required");
        EntityManager em = TVShow.entityManager();
        TypedQuery<TVShow> q = em.createQuery("SELECT o FROM TVShow AS o WHERE o.inputDate = :inputDate", TVShow.class);
        q.setParameter("inputDate", inputDate);
        return q;
    }
    
    public static TypedQuery<TVShow> TVShow.findTVShowsByInputter(User inputter) {
        if (inputter == null) throw new IllegalArgumentException("The inputter argument is required");
        EntityManager em = TVShow.entityManager();
        TypedQuery<TVShow> q = em.createQuery("SELECT o FROM TVShow AS o WHERE o.inputter = :inputter", TVShow.class);
        q.setParameter("inputter", inputter);
        return q;
    }
    
    public static TypedQuery<TVShow> TVShow.findTVShowsByIsPurchaseNot(Boolean isPurchase) {
        if (isPurchase == null) throw new IllegalArgumentException("The isPurchase argument is required");
        EntityManager em = TVShow.entityManager();
        TypedQuery<TVShow> q = em.createQuery("SELECT o FROM TVShow AS o WHERE o.isPurchase IS NOT :isPurchase", TVShow.class);
        q.setParameter("isPurchase", isPurchase);
        return q;
    }
    
    public static TypedQuery<TVShow> TVShow.findTVShowsByNameEquals(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        EntityManager em = TVShow.entityManager();
        TypedQuery<TVShow> q = em.createQuery("SELECT o FROM TVShow AS o WHERE o.name = :name", TVShow.class);
        q.setParameter("name", name);
        return q;
    }
    
    public static TypedQuery<TVShow> TVShow.findTVShowsByNameLike(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        name = name.replace('*', '%');
        if (name.charAt(0) != '%') {
            name = "%" + name;
        }
        if (name.charAt(name.length() - 1) != '%') {
            name = name + "%";
        }
        EntityManager em = TVShow.entityManager();
        TypedQuery<TVShow> q = em.createQuery("SELECT o FROM TVShow AS o WHERE LOWER(o.name) LIKE LOWER(:name)", TVShow.class);
        q.setParameter("name", name);
        return q;
    }
    
    public static TypedQuery<TVShow> TVShow.findTVShowsByPriceRangeLike(String priceRange) {
        if (priceRange == null || priceRange.length() == 0) throw new IllegalArgumentException("The priceRange argument is required");
        priceRange = priceRange.replace('*', '%');
        if (priceRange.charAt(0) != '%') {
            priceRange = "%" + priceRange;
        }
        if (priceRange.charAt(priceRange.length() - 1) != '%') {
            priceRange = priceRange + "%";
        }
        EntityManager em = TVShow.entityManager();
        TypedQuery<TVShow> q = em.createQuery("SELECT o FROM TVShow AS o WHERE LOWER(o.priceRange) LIKE LOWER(:priceRange)", TVShow.class);
        q.setParameter("priceRange", priceRange);
        return q;
    }
    
    public static TypedQuery<TVShow> TVShow.findTVShowsByProgress(Progress progress) {
        if (progress == null) throw new IllegalArgumentException("The progress argument is required");
        EntityManager em = TVShow.entityManager();
        TypedQuery<TVShow> q = em.createQuery("SELECT o FROM TVShow AS o WHERE o.progress = :progress", TVShow.class);
        q.setParameter("progress", progress);
        return q;
    }
    
    public static TypedQuery<TVShow> TVShow.findTVShowsByScreenwriters(List<People> screenwriters) {
        if (screenwriters == null) throw new IllegalArgumentException("The screenwriters argument is required");
        EntityManager em = TVShow.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM TVShow AS o WHERE");
        for (int i = 0; i < screenwriters.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :screenwriters_item").append(i).append(" MEMBER OF o.screenwriters");
        }
        TypedQuery<TVShow> q = em.createQuery(queryBuilder.toString(), TVShow.class);
        int screenwritersIndex = 0;
        for (People _people: screenwriters) {
            q.setParameter("screenwriters_item" + screenwritersIndex++, _people);
        }
        return q;
    }
    
    public static TypedQuery<TVShow> TVShow.findTVShowsByStatus(Status status) {
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = TVShow.entityManager();
        TypedQuery<TVShow> q = em.createQuery("SELECT o FROM TVShow AS o WHERE o.status = :status", TVShow.class);
        q.setParameter("status", status);
        return q;
    }
    
    public static TypedQuery<TVShow> TVShow.findTVShowsByTheme(Theme theme) {
        if (theme == null) throw new IllegalArgumentException("The theme argument is required");
        EntityManager em = TVShow.entityManager();
        TypedQuery<TVShow> q = em.createQuery("SELECT o FROM TVShow AS o WHERE o.theme = :theme", TVShow.class);
        q.setParameter("theme", theme);
        return q;
    }
    
}
